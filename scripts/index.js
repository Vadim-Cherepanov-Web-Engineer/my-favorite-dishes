// Общие функции для открытия и закрытия попапов:
function makePopup(universalPopup) { // Создаём универсальную функцию для открытия и закрытия всех попапов на сайте. Передаём функции аргумент "универсальный попап".
	const closeButtonPopup = universalPopup.querySelector (".popup__closed"); // Объявляем локальную переменную closeButtonPopup и присваиваем ей класс .popup__closed, содержащий стили для закрытия попапов, в том числе кнопку-крестик для закрытия попапа при нажатии на неё.
	const popup = { // Объявляем новую переменную popup, которая будет отвечать за открытие и закрытие попапов.
		open() { // Cоздаём функцию open (без аргументов), отвечающую за открытие попапов.
			universalPopup.classList.add("popup_opened"); // Аргументу universalPopup присваиваем класс .popup_opened, содержащий стили для открытия попапов.
			universalPopup.addEventListener("mousedown", onOverlayClick); // На аргумент universalPopup навешиваем обработчик события с типом события "нажатие мышью" и функцией-колбэком onOverlayClick, которая будет отвечать за закрытие попапов при клике на overlay (область сайта за пределами попапов).
			document.addEventListener("keydown", onKeyDown) // Также аргументу universalPopup навешиваем обработчик события с типом события "нажатие клавиши" и функцией-колбэком onKeyDown, которая будет отвечать за закрытие попапов при нажатии клавиши Esc.
			closeButtonPopup.addEventListener("click", onCloseButtonClick) // Переменной closeButtonPopup, содержащей стили для закрытия попапов, навешиваем обработчик события с типом события "клик мышью" и функцией-колбэком onCloseButtonClick, которая будет отвечать за закрытие попапов при нажатии на экране кнопки-крестика, которая закрывает попап.
		},
		close() { // Cоздаём функцию close (без аргументов), отвечающую за закрытие попапов.
			universalPopup.classList.remove("popup_opened"); // У аргумента universalPopup удаляем класс .popup_opened, содержащий стили для открытия попапов. Т.е. обнуляем эти стили.
			universalPopup.removeEventListener("mousedown", onOverlayClick); // У аргумента universalPopup удаляем обработчик события, отвечающий за закрытие попапов при клике на overlay (область сайта за пределами попапов).
			document.removeEventListener("keydown", onKeyDown); // У аргумента universalPopup удаляем обработчик события, отвечающий за закрытие попапов при нажатии клавиши Esc.
			closeButtonPopup.removeEventListener("click", onCloseButtonClick) // У переменной closeButtonPopup, содержащей стили для закрытия попапов, удаляем обработчик события с типом события "клик мышью" и функцией-колбэком onCloseButtonClick, которая отвечает за закрытие попапов при нажатии на экране кнопки-крестика, которая закрывает попап.
		}
	};

	// Теперь отдельно создаём 3 функции-колбэка, указанные в коде выше:

	const onKeyDown = (event) => { // Объявляем функцию-колбэк onKeyDown, которая будет отвечать за закрытие попапов при нажатии клавиши Esc. В качестве аргумента передаём в функцию событие Х (event).
		if (event.key === "Escape") { // Вызываем у события X метод key (ключ) и говорим, что: "Если на событии сработает (строго равно) клавиша Escape, то...
			popup.close(); // ... тогда мы "связываемся" с переменной popup и в ней вызываем функцию close, которая отвечает за закрытие попапов.
		} // Т.е. если на событии срабатывает клавиша Escape, то событие получает сигнал о том, что нужно связаться с переменной popup и запустить в ней функцию close, с помощью которой нужно сразу закрыть попап, на котором и произошло данное событие.
	};

	const onCloseButtonClick = () => { // Объявляем функцию-колбэк onCloseButtonClick, которая будет отвечать за закрытие попапов при нажатии на экране кнопки-крестика, которая закрывает попап. Стили кнопки-крестика содержатся в классе .popup__closed, который присвоен переменной closeButtonPopup.
		popup.close(); // При нажатии/клике на кнопку-крестик сразу же срабатывает функция-колбэк onCloseButtonClick, которая связывается с переменной popup и запускает в ней функцию close, которая мгновенно закрывает попап.
	};

	const onOverlayClick = (event) => { // Объявляем функцию-колбэк onOverlayClick, которая будет отвечать за закрытие попапов при клике на overlay (область сайта за пределами попапов). В качестве аргумента передаём в функцию событие Х (event).
		if (event.target.classList.contains("popup_opened")) { // Вызываем у события метод target, который проверяет, что точно ли именно на этом конкретном попапе сработало имеено это произошедшее событие. Т.е. точно ли произошедшее событие click сработало именно на этом конкретном попапе, а не на остальных.
			// Далее метод target, в свою очередь используя для этого свойство classList с методом contains, проверяет, что точно ли именно данный попап использует сейчас класс .popup_opened. Т.е. точно ли во время клика на overlay нужно закрыть именно этот конкретный попап, которой открыт в данный момент, а не какой-нибудь другой.
			popup.close() // При клике на overlay сразу же срабатывает функция-колбэк onOverlayClick, которая связывается с переменной popup и запускает в ней функцию close, которая мгновенно закрывает попап.
		}
	}

	return popup; // В итоге аргумент universalPopup делает все свои дела (открывает или закрывает попап разными способами) и результатом своей деятельности возвращает функции makePopup переменную popup, которая либо откроет, либо закроет выбранный попап.
}

// 1 попап - Редактирование профиля пользователя:

// Начинаем с объявления переменных (констант). Т.е. мы должны все классы попапов из HTML-разметки сделать DOM-элементами.
// Для этого нужно каждой переменной присвоить соответствующий класс с помощью метода querySelector.
// Это делается для того, чтобы мы могли работать с классами попапов как с DOM-элементами.

const editPopup = makePopup(document.querySelector(".profile-popup")); // Объявляем константу "редактировать Попап" и присваиваем ей нашу универсальную функцию makePopup для открытия и закрытия всех попапов на сайте.
// Но в качестве аргумента уже передаём не абстрактный universalPopup (как сверху), а именно конкретный попап "Редактирование профиля", с которым она и будет работать. Для этого указываем пустой "класс-маячок" .profile-popup, чтобы функция makePopup привязалась именно к этому попапу "Редактирование профиля".
const editButton = document.querySelector(".profile__edit-button"); // Объявляем константу "кнопка редактирования профиля" и присваиваем ей класс, содержащий стили для кнопки редактирования профиля.
const closeButton = document.querySelector(".popup__closed"); // Объявляем константу "кнопка закрытия попапа" и присваиваем ей класс, содержащий стили для кнопки закрытия попапа.
const titleInput = document.querySelector("#input-popup-title"); // Объявляем константу "заголовок инпута" и по id (идентификатору) с помощью метода querySelector связываемся с формой нашего попапа, чтобы получить доступ к инпуту "Ваше имя".
const subtitleInput = document.querySelector("#input-popup-subtitle"); // Объявляем константу "подзаголовок инпута" и по id (идентификатору) с помощью метода querySelector связываемся с формой нашего попапа, чтобы получить доступ к инпуту "Ваш статус в гастрономическом мире".
const titleProfile = document.querySelector(".profile__title"); // Объявляем константу "заголовок профиля" и присваиваем ей класс, отвечающий за отображение имени пользователя "Вадим Черепанов".
const subtitleProfile = document.querySelector(".profile__subtitle"); // Объявляем константу "подзаголовок профиля" и присваиваем ей класс, отвечающий за отображение статуса пользователя "Любитель вкусно поесть и сладко поспать!".
const editProfileForm = document.querySelector(".popup__form"); // Объявляем константу "Редактирование формы профиля" и присваиваем ей класс, отвечающий за стили формы в попапе.
const cards = document.querySelector(".cards"); // Объявляем константу "карточки"и присваиваем ей класс, описывающий стили и отображающий список карточек с блюдами.

// Создаём функцию, с помощью которой в попапе редактирования профиля будут отображаться текущие имя и статус пользователя.

editButton.addEventListener("click", function() {
	editPopup.open();
});

